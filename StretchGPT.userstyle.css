/* ==UserStyle==
@name           StretchGPT: Extra Wide ChatGPT Conversations
@version        5.2
@author         m1kethai
@description    Improves ChatGPT conversation readability by removing the narrow fixed content width and replacing it with subtle, adaptive padding for a consistent UX across all screen sizes.
@namespace      https://github.com/m1kethai/StretchGPT-Userstyle
@preprocessor   less
@var checkbox   hideAvatars       "Hide chat avatars: allows message content to expand further" 0
@var checkbox   enableColorize    "Enable colorization: unlocks color-related options below (currently ignored in ChatGPT's Light theme)" 0
@var checkbox   colorizeMsgBg    "Colorize user message background" 1
@var select     customColor    "Select custom color" {
	"Aged Sage*":                 "#8da572",
	"Akira":                      "#840000",
	"Amaretto":                   "#ab6f60",
	"Ancient Gold":               "#b59410",
	"Aztek":                      "#293432",
	"Black Pearl":                "#1e272c",
	"Black Sabbath":              "#220022",
	"Blue Moss":                  "#5D737E",
	"Cardamom":                   "#aaaa77",
	"Caviar":                     "#292a2d",
	"Cyber Grape":                "#58427C",
	"Cyprus":                     "#545a3e",
	"Dark and Stormy":            "#353f51",
	"Deep Jungle":                "#1A2421",
	"Deep Space":                 "#2D3142",
	"Dusty Turquoise":            "#5a8a89",
	"Earl Grey":                  "#a6978a",
	"Emerald":                    "#0f380f",
	"FF06B5":                     "#FF06B5",
	"Gameboy Teal":               "#0ABFBC",
	"Japanese Violet":            "#5B3256",
	"Lobster Bisque":             "#FFDAB9",
	"Obsidian Ash":               "#343434",
	"Purple Haze":                "#807396",
	"Raichu":                     "#fc8c2c",
	"Sakura Bloom":               "#ff7b9c",
	"Sharp Indigo":               "#48007c",
	"Super Blue Lavender":        "#5a5b9f",
	"Tokyo Midnight":             "#1a1a2e",
}

==/UserStyle== */
@-moz-document domain("chatgpt.com") {

    /* SELECTORS *************************************** */
    @-header: .sticky.top-0;
    @-sidebar: .flex-shrink-0.overflow-x-hidden.bg-token-sidebar-surface-primary;
    @-footer: main > div > div:last-child;

    @-msg: @{-header} ~ div:has(.group\/conversation-turn);
    @-msg--user: @{-msg}:not(:has(.agent-turn));
    @-msg--gpt: @{-msg}:has(.agent-turn);
    @-msg__inner-1: @{-msg} > div;
    @-msg__inner-2: @{-msg} .md\:max-w-3xl;

    @-input: main > div > div:last-child .md\:max-w-3xl;
    @-input__textarea: main > div > div:last-child .md\:max-w-3xl textarea;

    /* CORE // STRETCH ********************************* */
    @{-msg__inner-2} {
        max-width: 100% !important;
    }

    /* HIDE AVATARS ************************************ */
    @{-msg--gpt} when(@hideAvatars =1) {
        .flex-shrink-0.flex.flex-col.relative.items-end:has(.gizmo-bot-avatar) {
            display: none;
        }

        /* add back some padding */
        > div {
            padding-left: var(--pl) !important;
            @media (max-width: 767px) {
                --pl: max(calc(1vw*1rem), 1rem);
            } @media (min-width: 768px) {
                --pl: max(calc(1.5vw*1rem), 1.5rem);
                @media (min-width: 1536px) {
                    --pl: max(calc(2vw*1rem), 2rem);
                }
            }
        }
    }

    /* MISC. FIXES/ENHANCEMENTS ************************ */
    .prose :where(ol):not(:where([class~="not-prose"] *)) {
        padding-left: 1.85em;
    }

    /* COLORIZE **************************************** */
    html {
        &.dark { .colorize(dark)}
        &.light { .colorize(light)}
    }

    /* Mixin =========================================== */
    #colorLib() {
        /* Default Colors ----------------------------- */
        .defaults(dark) {
            @colors: {
                @bg: #212121; /* '--main-surface-primary', '--gray-800' */
                @text: #ececec; /* '--text-primary', '--gray-100' */
            }
        }
        .defaults(light) {
            @colors: {
                @bg: white; /* '--main-surface-primary', '--gray-100' */
                @text: #0d0d0d; /* '--text-primary', '--gray-950' */
            }
        }

        .bgTint(@theme, @base) {
            @sat: round(saturation(@blended));
            @blended: if(
                @theme =light,
                mix(@base, @customColor, 90%),
                if(
                    luma(@customColor) < 5%,
                    @customColor,
                    mix(@base, @customColor, 70%)
                )
            );
            @faded: fadeout(@blended,
                if(@sat <= 55%, 0%,
                    if(@sat < 70%, 40%,
                        if(@sat < 90%, 50%,
                            60%
                        )
                    )
                ),
                relative
            );

            @result: if(@theme =light, @blended, @faded);
        }

        .accessibleText(@bg, @light: #ececec, @dark: #0d0d0d) {
            /* Get the most contrasted text color vs the background color (using default threshold of 43%): */
            @result: contrast(@bg, @light, @dark);
        }
    }

    .colorize(@theme: dark) when(@enableColorize =1) {
        @default: if(@theme =dark, #colorLib.defaults(dark)[], #colorLib.defaults(light)[]);
        @dBg: @default[@bg];
        @dT: @default[@text];

        /* Colorize Elements */
        .el() {
            @bg: #colorLib.bgTint(@theme, @dBg)[];
            @text: #colorLib.accessibleText(@bg)[];
            background-color: @bg !important;
            color: @text !important;
        }

        @{-msg--user} when (@colorizeMsgBg =1) {
            .colorize.el();
        }
    }
}
