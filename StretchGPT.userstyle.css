/* ==UserStyle==
@name         StretchGPT [Beta]
@version      6.7
@author       m1kethai
@description  A collection of configurable ChatGPT enhancements that allows you to resize the main chat area and other major aspects of the UI - plus several additional toggleable features for color customization, hiding/removing annoying elements, and more.
@namespace    https://userstyles.world/style/9821/stretchgpt-extra-wide-chatgpt-conversations
@preprocessor less
@var select   stretchFactor             "🧘 Stretch Factor" {
    "⛔ Disabled":     "0",
    "🤏 Conservative": "1",
    "✨ Roomy":        "2",
    "👹 Spacious*":    "3",
    "🫨 Unrestricted": "4"
}
@var checkbox enableChatBubbleStretch   "🗯️ Allow user message bubbles to expand to 100% width" 0
@var checkbox hideDisclaimer            "⚠️ Hide disclaimer/warning text (\"ChatGPT can make mistakes...\")" 0
@var checkbox enableColorization        "🔓 Enable color customization features below" 0
@var checkbox enableColorizeComposer    "🌈 Composer/input component" 1
@var checkbox enableColorizeBubble      "🌈 Message bubbles" 1
@var checkbox enableColorizeBubbleAndBg "🌈 Message bubbles + full message BG (box above must be ticked)" 0
@var select   colorPreset               "🎨 Color Preset:" {
    "Absinthe*":            "#76b583",
    "Aged Sage":            "#8da572",
    "Akira":                "#840000",
    "Amaretto":             "#ab6f60",
    "Ancient Gold":         "#b59410",
    "Aztek":                "#293432",
    "Black Pearl":          "#1e272c",
    "Black Sabbath":        "#220022",
    "Blue Moss":            "#5D737E",
    "Cardamom":             "#aaaa77",
    "Caviar":               "#292a2d",
    "Chrysanthemum":        "#c35458",
    "Cloud City":           "#88a2c7",
    "Cyber Grape":          "#58427C",
    "Cyprus":               "#545a3e",
    "Dark and Stormy":      "#353f51",
    "Deep Jungle":          "#1A2421",
    "Deep Space":           "#2D3142",
    "Dusty Turquoise":      "#5a8a89",
    "Earl Grey":            "#a6978a",
    "Emerald":              "#0f380f",
    "Falco Feathers":       "#5c8dc8",
    "FF06B5":               "#FF06B5",
    "Galactic Empire":      "#5e4d7e",
    "Gameboy Teal":         "#0ABFBC",
    "Gondor Stone":         "#7d746a",
    "Gotham Slate":         "#555d68",
    "Gryffindor Scarlet":   "#b34b4b",
    "Hellboy Crimson":      "#a02b2b",
    "Hoth Snow":            "#d8d9d6",
    "Hyrule Green":         "#6d9f4b",
    "Japanese Violet":      "#5B3256",
    "Kirby":                "#e285b8",
    "Lobster Bisque":       "#FFDAB9",
    "Majora's Mask":        "#803a9a",
    "Master Emerald":       "#6abf7d",
    "Miso":                 "#f6a04d",
    "Mushroom Kingdom":     "#d95850",
    "Mystic Amethyst":      "#9b7bbd",
    "Nimbus 2001":          "#7f888e",
    "Obsidian Ash":         "#343434",
    "Pacific Rim":          "#3d7fac",
    "Prince":               "#4b384c",
    "Purple Haze":          "#807396",
    "Raccoon City":         "#6a6966",
    "Raichu":               "#fc8c2c",
    "Rose Quartz":          "#e9a1b0",
    "Sailor Moon":          "#ffee00",
    "Sakura Bloom":         "#ff7b9c",
    "Sanguine":             "#6c110e",
    "Sapphired":            "#5b82a6",
    "Sharp Indigo":         "#48007c",
    "Simpsons Sunshine":    "#e5c23a",
    "Slytherin Jade":       "#599c7b",
    "Sonic Blue":           "#4a90d9",
    "Spartan Armor":        "#3a6b56",
    "Steampunk Leather":    "#6f3b34",
    "Super Blue Lavender":  "#5a5b9f",
    "Tatooine Dusk":        "#d99152",
    "Tokyo Midnight":       "#1a1a2e",
    "Wasabi Paste":         "#afd77f",
    "Wasabi Peanut":        "#b4c79c",
    "Winnie's Honey":       "#e2b64d",
    "Wisteria":             "#a48cbc",
    "Yoshi Egg":            "#9cd97c",
}
@var checkbox enableColorPicker "🎨 Override color preset with a totally custom color" 0
@var color pickerColor "🎨 Custom color (overrides any preset selected above)" #599c7b
@var checkbox _DEBUG "[DEV] Element debug mode" 0

==/UserStyle== */
@-moz-document domain("chatgpt.com") {
    html {
        /* ===== SETUP ===== */
        #set-breakpoints() {
            @sm:                     ~"screen and (min-width: 0px) and (max-width: 767px)";
            @sm-max:                 ~"screen and (max-width: 767px)";
            @md:                     ~"screen and (min-width: 768px) and (max-width: 1023px)";
            @md-up:                  ~"screen and (min-width: 768px)";
            @md-max:                 ~"screen and (max-width: 1023px)";
            @lg:                     ~"screen and (min-width: 1024px) and (max-width: 1535px)";
            @lg-up:                  ~"screen and (min-width: 1024px)";
            @lg-max:                 ~"screen and (max-width: 1535px)";
            @xl:                     ~"screen and (min-width: 1536px) and (max-width: 2047px)";
            @xl-up:                  ~"screen and (min-width: 1536px)";
            @xl-max:                 ~"screen and (max-width: 2047px)";
            @xxl:                    ~"screen and (min-width: 2048px) and (max-width: 2559px)";
            @xxl-up:                 ~"screen and (min-width: 2048px)";
            @xxl-max:                ~"screen and (max-width: 2559px)";
            @xxxl:                   ~"screen and (min-width: 2560px)";
            @mobile:                 @sm-max;
            @desktop:                @md-up;
        }
        #set-selectors() {
            @-chat:                  .composer-parent;
            @-chat__msg:             @{-chat} article:has(.group\/conversation-turn);
            @-chat__msg-outer:       @{-chat__msg}>div;
            @-chat__msg-inner:       @{-chat__msg-outer}>div;
            @-chat__msg--user:       @{-chat__msg}:has(div[data-message-author-role="user"]);
            @-chat__msg--gpt:        @{-chat__msg}:has(div[data-message-author-role="assistant"]);
            @-chat__composer:        .w-full[data-type="unified-composer"]>div;
            @-chat--sm:              @{-header}~main div.flex-1.overflow-hidden;
            @-chat__msg--sm:         .text-message;
            @-chat__msg--user--sm:   @{-chat__msg--sm}[data-message-author-role="user"];
            @-chat__msg--gpt--sm:    @{-chat__msg--sm}[data-message-author-role="assistant"];
            @-header:                @{-chat} > .sticky.h-header-height;
            @-sidebar:               .flex-shrink-0.overflow-x-hidden.bg-token-sidebar-surface-primary;
            @-footer:                @{-chat} .md\:px-\[60px\];

            @-chat--sm:              @{-header--sm} ~ main;
            @-header--sm:            .sticky.h-header-height.md\:hidden;
        }

        #set-breakpoints();
        #set-selectors();

        /* ===== CORE FUNCTIONALITY/STRETCH ===== */

        & when (@stretchFactor >=1) {
            div.group\/conversation-turn {
                padding-left: 0 !important;
                padding-right: 0 !important;
            }

            @{-chat__msg-inner} {
                @sfWidths: {
                    conservative: 85%, 80%, 70%;
                    roomy:        95%, 90%, 80%;
                    spacious:     97%, 90%, 90%;
                    unrestricted: 98%, 99%, 99%;
                }
                @viewportWidths: if(
                    @stretchFactor =1, @sfWidths[conservative], if(
                    @stretchFactor =2, @sfWidths[roomy], if(
                    @stretchFactor =3, @sfWidths[spacious], @sfWidths[unrestricted]
                )));

                --mw: 100%;
                @media @md {
                    --mw: max(48rem, extract(@viewportWidths, 1)) !important;
                } @media @lg {
                    --mw: extract(@viewportWidths, 2) !important;
                } @media @xl-up {
                    --mw: extract(@viewportWidths, 3) !important;
                }
                max-width: var(--mw);
            }
        }

        /* ===== STRETCH USER MESSAGE BUBBLES ===== */
        & when (@enableChatBubbleStretch =1) {
            --user-chat-width: 100% !important;
        }

        /* ===== HIDE DISCLAIMER ===== */
        @{-footer} when(@hideDisclaimer =1) {
            @-textDiv: &>div:only-child;

            //- unset MH from `.min-h-8`
            min-height: unset;
            //- reset padding (.p-2) & add small bottom margin
            padding: 0;
            margin-bottom: 0.5rem;
            @{-textDiv} {
                display: none !important;
            }
        }

        /* ===== COLORIZATION ===== */
        .colorLib() {
            //* Make minor adjustments to @customColor so it's never too harsh and looks as good as possible for every element it can be applied to.
            .adjustedCC(@bt, @bbg) {
                @lightThemeCC: mix(@bbg, @customColor, 90%);

                @sat: round(saturation(@customColor));
                //: Any color with saturation below this threshold remains unchanged.
                @satThreshold: 75%;
				@blendMultiplier: 3;
				@blendMultiplier: max(2.5, (1 + (0.02 * unit(lightness(@customColor)))));
                @darkBlend: if(
						@sat <= @satThreshold,
						@customColor,
						mix(
							@customColor,
							@bbg,
							100% - (@blendMultiplier * (@sat - @satThreshold))
						)
                );
				@darkThemeCC: @darkBlend;

				//TODO: add separate option to use the transparency method instead
                //: The max transparency that can be applied to the color.
/*                 @maxFade: 30%;
                @fadeAmt: if(
                    @sat <= @satThreshold, 0%,
                    min(@maxFade, (@sat - @satThreshold))
                );
                @darkThemeCC: fadeout(@darkBlend, @fadeAmt, relative); */

                //* Use the blended color for light themes and the faded color for dark themes.
                @result: if(
                    @bt =light,
                    @lightThemeCC,
                    @darkThemeCC
                );
            }

            //* Set text/foreground color to a predefined dark or light color, to maximize contrast against its background (using common threshold: 43%).
            .accessibleFg(@bgc, @l: #ececec, @d: #0d0d0d) {
                // TODO: add option to directly use @customColor as the FG color if it passes the accessible contrast threshold
                @result: contrast(@bgc, @l, @d);
            }
        }

        .colorize(@baseTheme: dark) {
            @baseBg: if(@baseTheme =light, white, #212121);
            @baseFg: if(@baseTheme =light, #0d0d0d, #ececec);
            @customColor: if(
                @enableColorPicker =1 and iscolor(@pickerColor),
                @pickerColor,
                if(
                    iscolor(@colorPreset),
                    @colorPreset,
                    #ff06b5 // default color if no preset is selected (should never happen!)
                )
            );
            @customBg: .colorLib.adjustedCC(@baseTheme, @baseBg)[];
            @customFg: .colorLib.accessibleFg(@customBg)[];

            .apply() {
                background-color: @customBg !important;
                color: @customFg !important;
            }

            @{-chat__composer} when (@enableColorizeComposer =1) {
                .apply();
                button.rounded-full {
                    &[disabled] {
                        color: fadeout(@customFg, 65%);
                        background-color: fadeout(@customFg, 85%) !important;
                    }
                    &:not([disabled]) {
                        color: @customFg;
                        background-color: inherit;
                    }
                }
            }

            & when (@enableColorizeBubble =1) {
                @-msg-bubble: .relative.rounded-3xl;
                @media @sm-max {
                    @{-chat__msg--user--sm} {
                        @{-msg-bubble} {.apply()}
                    }
                }
                @media @md-up {
                    @{-chat__msg--user} {
                        & when (@enableColorizeBubbleAndBg =1) {
                            .apply();
                            @{-msg-bubble} {
                                @softBg: fade(softlight(@customColor, @customBg), 40%);
                                background-color: @softBg;
                            }
                        }
                        & when (@enableColorizeBubbleAndBg =0) {
                            @{-msg-bubble} {
                                .apply();
                            }
                        }
                    }
                }
            }
        }

        & when(@enableColorization =1) {
            &.dark { .colorize(@baseTheme: dark) }
            &.light { .colorize(@baseTheme: light) }
            // .colorize(@baseTheme);
        }

        /* ===== MISC ENHANCEMENTS/FIXES ===== */

        //* Fixes old UI bug where the left side of numbers get cut off in every <ol> list
        // TODO: test if this has been fully resolved @ all breakpoints
        @{-chat__msg--gpt} .prose :where(ol):not(:where([class~="not-prose"] *)) {
            padding-left: 1.85em;
        }

        /* ===== DEBUG ===== */

        .debugEl(@i) when(@_DEBUG =1) {
            @bc: if(isnumber(@i), spin(@customColor, (@i*45)), @customColor);
            box-shadow: inset 0 0 0 2px fadeout(@bc, 66%) !important;
        }
    }
}
